{
  "language": "Solidity",
  "sources": {
    "contracts/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.7;\r\nimport \"./PriceLibary.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceCoversionLibary for uint256;\r\n    uint256 public constant MINIMUM_USD = 20 * 1e18;\r\n    mapping(address => uint256) public addressToAmountFuned;\r\n    uint public number;\r\n    address[] public funders;\r\n    address public immutable iowner;\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        iowner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != iowner) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\r\n            \"Didn't send enough\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToAmountFuned[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 len = funders.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address funder = funders[i];\r\n            addressToAmountFuned[funder] = 0;\r\n        }\r\n\r\n        //重置funders\r\n        funders = new address[](0);\r\n\r\n        //转账\r\n        // tranfer\r\n        // payable (msg.sender).transfer(address(this).balance);\r\n        // //send\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess,\"Send failed\");\r\n\r\n        //call\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function cheapWithDraw() public payable onlyOwner {\r\n        address[] memory c_funders = funders;\r\n        uint256 len = c_funders.length;\r\n        for (uint i = 0; i < len; i++) {\r\n            address funder = c_funders[i];\r\n            addressToAmountFuned[funder] = 0;\r\n        }\r\n        funders = new address[](0);\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n\r\n        require(success, \"Call failed\");\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceLibary.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.7;\r\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\r\n\r\n// import \"https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\"\r\n// import {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\n/**\r\n * Network: sepolia\r\n * Aggregator: ETH/USD\r\n * Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n */\r\nlibrary PriceCoversionLibary {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        // );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint(price * 1e10);\r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256) {\r\n    //     AggregatorV3Interface pticeFeed = AggregatorV3Interface(\r\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n    //     );\r\n    //     return pticeFeed.version();\r\n    // }\r\n\r\n    function getConversionRate(\r\n        uint ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint) {\r\n        uint ethPrice = getPrice(priceFeed);\r\n        uint ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}